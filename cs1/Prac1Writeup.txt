--------------------TASK ONE --------------------------------

Profiling the untouched program with matsize 700 yeilds results at end of txt document (clipped to important parts):

-- Initial conclusions

	My initial conclusions lead me to beleive multmatrix is the primary problem area with a run time of ~27s. 
	The madd routine seems to be called a large number of times which should be reduced or eliminated.
	The Inv routine also may be subject to optimisation as might MatMult & LUDecomp.

--------------------TASK TWO --------------------------------

In task two, I implemented timers before and after each of the resource heaviest components of the code.
The implemented timers are over each matrix routine S, K and Pnew. 
I then ran these timers before and after my optimsations several times to minimise random noise contributions.

I optimised the madd calls by performing operations inline.
I also performed some loop unrolling.

---------------- Unoptimised
Initial times averaged over four runs.
S = ~13s, K = ~30s and P =~12s
---------------- Optimised
Optimised times, by removing calls to madd and instead performing operations inline. 
Averaged over four runs.
S = ~3.1, K = 8.82, P = ~2.98 overall time of ~15s

---------------- Optimised with unrolling
Optimised times, by removing calls to madd and instead performing operations inline. 
Averaged over four runs.
S = ~3.0, K = ~8.6, P = ~2.6 overall time of ~13s

Thus I was able to conclude that the madd calls were contributing to signficant slowdowns in the code.

The loop unrolling appeared to have a slight speedup also.

--------------------TASK THREE --------------------------------

Manually optimised code with O0 runs in ~15s over many runs
Manually optimised code with 01 runs in ~4.7s over many runs
Manually optimised code with O2 runs in average ~4.7s over many runs
Manually optimised code with O3 runs in average ~4.7s over many runs

Unoptimised code with 00 runs in ~45s over many runs
Unoptimised code with 01 runs in ~4.7s over many runs
Unoptimised code with 02 runs in ~4.7s over many runs
Unoptimised code with 03 runs in ~4.7s over many runs

It appears compiler optimisations addressed the issues that I was able to optimise.
This suggests one of the compiler optimisations triggered in 01 and up is to reduce unneccesary
function calls / replace function calls.

Interestingly, comparing the manually optimised 03 profiled run [1] with the compiler optimised 03 only [2]

-----1------
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 59.42      2.70     2.70                             MultMatrix
 29.49      4.05     1.34                             Inv
 11.22      4.56     0.51        1   510.68   510.68  LUDecomp

with the compiler optimised 03 only 

------2------
  %   cumulative   self              self     total           
 time   seconds   seconds    calls   s/call   s/call  name    
 54.36      2.47     2.47        1     2.47     2.47  LUDecomp
 29.49      3.82     1.34                             Inv
 16.29      4.56     0.74                             ddot
 
 yeilded similar run times with very different routine structure. I imagine this is the result of the inline
 optimisations compressing the various routines into one large function, thus rendering the profiler results 
 fairly meaningless. This observation further supports the above theory.


--------------------TASK ONE GRAPH paste -----------------------

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls   s/call   s/call  name    
 61.03     20.63    20.63        6     3.44     4.68  MultMatrix
 22.12     28.10     7.48 2059960000     0.00     0.00  madd
  9.42     31.29     3.18        1     3.18     5.69  Inv
  4.20     32.71     1.42        1     1.42     1.42  MatMult
  3.23     33.80     1.09        1     1.09     1.09  LUDecomp
  0.03     33.81     0.01        2     0.01     0.01  ExtractVariance
  0.03     33.82     0.01        2     0.01     0.01  TransposeMatrix
  0.03     33.83     0.01        1     0.01     0.01  convert1DTo2DArray
  0.00     33.83     0.00     2800     0.00     0.00  ddot
  0.00     33.83     0.00        6     0.00     0.00  disp
  0.00     33.83     0.00        2     0.00     0.00  addSubMatrix
  0.00     33.83     0.00        2     0.00     0.00  cpu_time
  0.00     33.83     0.00        1     0.00     0.00  CompRMat
  0.00     33.83     0.00        1     0.00     0.00  CompareVecMax
  0.00     33.83     0.00        1     0.00     0.00  Eye
  0.00     33.83     0.00        1     0.00     0.00  Eye2D
  0.00     33.83     0.00        1     0.00     0.00  convert2DTo1DArray

  and Call graph 
  
 -----------------------

gindex % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00   33.83                 main [1]
               20.63    7.47       6/6           MultMatrix [2]
                3.18    2.51       1/1           Inv [4]
                0.01    0.00       2/2           ExtractVariance [7]
                0.01    0.00       2/2           TransposeMatrix [8]
                0.01    0.00       1/1           convert1DTo2DArray [9]
                0.00    0.00       1/1           CompRMat [11]
                0.00    0.00       6/6           disp [12]
                0.00    0.00       2/2           cpu_time [14]
                0.00    0.00       2/2           addSubMatrix [13]
                0.00    0.00       1/1           convert2DTo1DArray [18]
                0.00    0.00       1/1           Eye2D [17]
                0.00    0.00       1/1           CompareVecMax [15]
-----------------------------------------------
               20.63    7.47       6/6           main [1]
[2]     83.1   20.63    7.47       6         MultMatrix [2]
                7.47    0.00 2058000000/2059960000     madd [3]
-----------------------------------------------
                0.01    0.00 1960000/2059960000     ddot [10]
                7.47    0.00 2058000000/2059960000     MultMatrix [2]
[3]     22.1    7.48    0.00 2059960000         madd [3]
-----------------------------------------------